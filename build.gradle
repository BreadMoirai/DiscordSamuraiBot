plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'java'
    id 'idea'
}

idea.module.downloadJavadoc = true

version = "4.8." + file("version.txt").getText()

mainClassName = "samurai.Bot"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile 'net.dv8tion:JDA:3.0.0_175'
    compile 'org.codehaus.groovy:groovy:2.4.8'
    compile 'org.reflections:reflections:0.9.10'
    compile 'com.typesafe:config:1.3.1'
    compile 'com.sedmelluq:lavaplayer:1.2.36'
    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'com.google.apis:google-api-services-youtube:v3-rev183-1.22.0'
    compile 'org.jdbi:jdbi3:3.0.0-beta1'
    compile 'org.jetbrains:annotations:13.0'
    compile group: 'org.apache.derby', name: 'derby', version: '10.13.1.1'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

tasks.create('incrementVersionCode', {
    println(":incrementVersionCode - Incrementing Version Code...")
    def versionFile = file("version.txt")
    def mVersionCode = Integer.parseInt(versionFile.getText())
    def mNextVersionCode = mVersionCode + 1
    println(":incrementVersionCode - current :" + mVersionCode)
    println(":incrementVersionCode - next    :" + mNextVersionCode)
    versionFile.write(mNextVersionCode as String)
})

shadowJar.dependsOn(tasks['incrementVersionCode'])

import org.apache.tools.ant.filters.ReplaceTokens

tasks.create('sourcesForRelease', Copy.class)
sourcesForRelease.with {
    from 'src/main/java'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            buildVersion : version
    ])
}

def filterSpec = copySpec {
    from('src/main/java')
}

tasks.create('appendLiscense', Copy.class)
appendLiscense.with(filterSpec)
appendLiscense.setDestinationDir(file('build/withLiscense'))
def header = file('header.txt').getText()
def prependHeader = new Action<FileCopyDetails>() {
    @Override
    void execute(FileCopyDetails fileCopyDetails) {
        def file = fileCopyDetails.getFile()
        def content = file.getText()
        file.setText(header + content)
    }
}
appendLiscense.eachFile(prependHeader)

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath
    dependsOn sourcesForRelease
}

