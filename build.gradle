plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'java'
    id 'idea'
    id 'com.sedmelluq.jdaction' version '1.0.1'
}

idea.module.downloadJavadoc = true

def majorVersion = 5
def minorVersion = 5
mainClassName = "samurai.Bot"

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile 'com.github.DV8FromTheWorld:JDA:55bddc2'
    compile 'com.sedmelluq:jda-nas:1.0.5'
    compile 'com.sedmelluq:lavaplayer:1.2.39'
    compile 'org.codehaus.groovy:groovy:2.4.8'
    compile 'org.reflections:reflections:0.9.10'
    compile 'com.typesafe:config:1.3.1'
    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'com.google.apis:google-api-services-youtube:v3-rev183-1.22.0'
    compile group: 'org.apache.derby', name: 'derby', version: '10.13.1.1'
    compile 'org.jdbi:jdbi3:3.0.0-beta1'
    compile 'org.jdbi:jdbi3-parent:3.0.0-beta1'
    compile 'org.jdbi:jdbi3-sqlobject:3.0.0-beta1'
    compile 'ai.api:libai:1.4.8'
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'org.jetbrains:annotations:13.0'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

tasks.create('incrementVersionCode', {
    def file = file("version.txt")
    if (!file.exists()) {
        file.createNewFile()
        file.write('0')
    }
    println(":incrementVersionCode - Incrementing Version Code...")
    def versionFile = file
    def mVersionCode = Integer.parseInt(versionFile.getText())
    def mNextVersionCode = mVersionCode + 1
    println(":incrementVersionCode - previous:" + mVersionCode)
    println(":incrementVersionCode - current :" + mNextVersionCode)
    versionFile.write(mNextVersionCode as String)
})

version = "${majorVersion}.${minorVersion}.${file("version.txt").getText()}".toString()
import org.apache.tools.ant.filters.ReplaceTokens
tasks.create('sourcesForRelease', Copy.class)
sourcesForRelease.with {
    from 'src/main/java'
    from 'src/main/resources'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            buildVersion : version
    ])
}
sourcesForRelease.doLast {incrementVersionCode}


compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath
    options.encoding = 'UTF-8'
    dependsOn sourcesForRelease
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}