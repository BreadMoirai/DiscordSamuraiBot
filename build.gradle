plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.4'
    id 'java'
    id 'idea'
    id 'com.sedmelluq.jdaction' version '1.0.1'
}

idea.module.downloadJavadoc = true

def majorVersion = 7
def minorVersion = 0
mainClassName = "samurai.Bot"

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    //discord
    compile 'com.github.DV8FromTheWorld:JDA:experimental~message-rw-SNAPSHOT'
    compile 'com.sedmelluq:lavaplayer:1.2.39'

    //api
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'com.google.apis:google-api-services-youtube:v3-rev183-1.22.0'
    compile 'ai.api:libai:1.4.8'

    //database
    compile 'org.apache.derby:derby:10.13.1.1'
    compile 'org.jdbi:jdbi3:3.0.0-beta1'
    compile 'org.jdbi:jdbi3-parent:3.0.0-beta1'
    compile 'org.jdbi:jdbi3-sqlobject:3.0.0-beta1'

    //util
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'com.typesafe:config:1.3.1'
    compile 'org.codehaus.groovy:groovy:2.4.8'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.jetbrains:annotations:13.0'

    //test
    testCompile 'junit:junit:4.11'
}

tasks.create('incrementVersionCode') {
    def file = file("version.txt")
    if (!file.exists()) {
        file.createNewFile()
        file.write('0')
    }
    println(":incrementVersionCode - Incrementing Version Code...")
    def versionFile = file
    def mVersionCode = Integer.parseInt(versionFile.getText())
    def mNextVersionCode = mVersionCode + 1
    println(":incrementVersionCode - previous:" + mVersionCode)
    println(":incrementVersionCode - current :" + mNextVersionCode)
    versionFile.write(mNextVersionCode as String)
}

version = "${majorVersion}.${minorVersion}.${file("version.txt").getText()}".toString()
import org.apache.tools.ant.filters.ReplaceTokens

tasks.create('sourcesForRelease', Copy.class) {
    from 'src/main/java'
    from 'src/main/resources'
    into 'build/filteredSrc'
    filter(ReplaceTokens, tokens: [
            buildVersion: version
    ])
    doLast { tasks['incrementVersionCode']}
}


compileJava {
    options.encoding = 'UTF-8'
    if (!project.hasProperty('testing')) {
        source = (tasks['sourcesForRelease'] as Copy).destinationDir
        classpath = sourceSets.main.compileClasspath
        dependsOn tasks['sourcesForRelease']
    }
}

run().with {
    if (project.hasProperty("appArgs")) {
        args = Eval.me(project.property("appArgs") as String)
    }
    return run()
}
